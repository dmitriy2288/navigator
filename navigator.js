// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
class CollegeNavigator {
    constructor() {
        this.currentFloor = 1;
        this.floorsData = {};
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async init() {
        await this.loadFloorsData();
        this.createFloorSelector();
        this.loadFloor(1);
        this.bindGlobalEvents();
    }

    // –î–∞–Ω–Ω—ã–µ –æ –ø–æ–º–µ—â–µ–Ω–∏—è—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ JSON)
    async loadFloorsData() {
        this.floorsData = {
            1: {
                name: "–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂",
                svgFile: 'maps/floor-1.svg',
                rooms: {
                    'room-101': { 
                        number: "101", 
                        name: "–ö–∞–±–∏–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏", 
                        type: "classroom",
                        description: "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å, –ø—Ä–æ–µ–∫—Ç–æ—Ä",
                        capacity: "25 –º–µ—Å—Ç"
                    },
                    'room-102': { 
                        number: "102", 
                        name: "–ö–∞–±–∏–Ω–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", 
                        type: "classroom",
                        description: "–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π",
                        capacity: "30 –º–µ—Å—Ç"
                    },
                    'stairs-a': { 
                        number: "A", 
                        name: "–õ–µ—Å—Ç–Ω–∏—Ü–∞ –ê", 
                        type: "stairs",
                        description: "–û—Å–Ω–æ–≤–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ –º–µ–∂–¥—É —ç—Ç–∞–∂–∞–º–∏"
                    },
                    'entrance-main': { 
                        number: "–ì–ª–∞–≤–Ω—ã–π", 
                        name: "–ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥", 
                        type: "entrance",
                        description: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ –≤ —Ç–µ—Ö–Ω–∏–∫—É–º"
                    }
                }
            },
            2: {
                name: "–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂",
                svgFile: 'maps/floor-2.svg',
                rooms: {
                    'room-201': { 
                        number: "201", 
                        name: "–§–∏–∑–∏—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", 
                        type: "lab",
                        description: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç",
                        capacity: "20 –º–µ—Å—Ç"
                    },
                    'room-202': { 
                        number: "202", 
                        name: "–ö–∞–±–∏–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏", 
                        type: "classroom",
                        description: "–ö–ª–∞—Å—Å –¥–ª—è –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω",
                        capacity: "28 –º–µ—Å—Ç"
                    }
                }
            },
            3: {
                name: "–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂",
                svgFile: 'maps/floor-3.svg',
                rooms: {
                    'room-301': { 
                        number: "301", 
                        name: "–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª", 
                        type: "auditorium",
                        description: "–ü–æ–º–µ—â–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —Å–æ–±—Ä–∞–Ω–∏–π",
                        capacity: "100 –º–µ—Å—Ç"
                    }
                }
            },
            4: {
                name: "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂", 
                svgFile: 'maps/floor-4.svg',
                rooms: {
                    'room-401': { 
                        number: "401", 
                        name: "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª", 
                        type: "gym",
                        description: "–ó–∞–ª –¥–ª—è –∑–∞–Ω—è—Ç–∏–π —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–æ–π",
                        capacity: "50 –º–µ—Å—Ç"
                    }
                }
            }
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —ç—Ç–∞–∂–µ–π
    createFloorSelector() {
        const selector = document.querySelector('.floor-selector');
        selector.innerHTML = '';

        Object.keys(this.floorsData).forEach(floorNum => {
            const button = document.createElement('button');
            button.className = 'floor-btn';
            button.dataset.floor = floorNum;
            button.textContent = `${floorNum} —ç—Ç–∞–∂`;
            
            button.addEventListener('click', (e) => {
                this.switchFloor(parseInt(e.target.dataset.floor));
            });
            
            selector.appendChild(button);
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç—Ç–∞–∂–∞
    async switchFloor(floorNumber) {
        if (floorNumber === this.currentFloor) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.floor-btn').forEach(btn => {
            btn.classList.toggle('active', parseInt(btn.dataset.floor) === floorNumber);
        });
        
        this.currentFloor = floorNumber;
        await this.loadFloor(floorNumber);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ SVG –∫–∞—Ä—Ç—ã —ç—Ç–∞–∂–∞
    async loadFloor(floorNumber) {
        const floorData = this.floorsData[floorNumber];
        if (!floorData) return;

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            this.showLoading();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            document.getElementById('floor-title').textContent = floorData.name;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º SVG
            const response = await fetch(floorData.svgFile);
            const svgText = await response.text();
            
            const container = document.getElementById('svg-container');
            container.innerHTML = svgText;
            
            // –î–µ–ª–∞–µ–º SVG –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º
            this.makeSvgInteractive(floorNumber);
            
            this.hideLoading();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã:', error);
            this.showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É ${floorNumber} —ç—Ç–∞–∂–∞`);
        }
    }

    // –î–µ–ª–∞–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
    makeSvgInteractive(floorNumber) {
        const svg = document.querySelector('#svg-container svg');
        if (!svg) return;

        const floorData = this.floorsData[floorNumber];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å ID (–∫–æ–º–Ω–∞—Ç—ã, –ª–µ—Å—Ç–Ω–∏—Ü—ã, –≤—Ö–æ–¥—ã)
        const interactiveElements = svg.querySelectorAll('[id]');
        
        interactiveElements.forEach(element => {
            const elementId = element.id;
            const roomData = floorData.rooms[elementId];
            
            if (roomData) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
                element.classList.add('interactive-room');
                element.classList.add(`room-type-${roomData.type}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                this.addRoomEventListeners(element, roomData, elementId);
            }
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    addRoomEventListeners(element, roomData, elementId) {
        // –ö–ª–∏–∫ - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        element.addEventListener('click', (e) => {
            e.stopPropagation();
            this.showRoomInfo(roomData, elementId, element);
        });

        // –ù–∞–≤–µ–¥–µ–Ω–∏–µ - –ø–æ–¥—Å–≤–µ—Ç–∫–∞
        element.addEventListener('mouseenter', (e) => {
            if (!element.classList.contains('selected')) {
                element.classList.add('hovered');
            }
        });

        element.addEventListener('mouseleave', (e) => {
            element.classList.remove('hovered');
        });

        // –î–æ–±–∞–≤–ª—è–µ–º title –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞
        element.setAttribute('title', `${roomData.number} - ${roomData.name}`);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–º–µ—â–µ–Ω–∏–∏
    showRoomInfo(roomData, elementId, element) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        this.resetSelection();
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        element.classList.add('selected');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏
        const infoPanel = document.getElementById('room-info');
        infoPanel.innerHTML = this.createRoomInfoHTML(roomData, elementId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        infoPanel.classList.add('visible');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        this.selectedElement = element;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
    createRoomInfoHTML(roomData, elementId) {
        const typeIcons = {
            classroom: 'üè´',
            lab: 'üî¨', 
            auditorium: 'üé≠',
            gym: '‚öΩ',
            stairs: 'ü™ú',
            entrance: 'üö™',
            office: 'üíº'
        };

        const icon = typeIcons[roomData.type] || 'üìç';

        return `
            <div class="room-header">
                <span class="room-icon">${icon}</span>
                <h3>${roomData.number} - ${roomData.name}</h3>
            </div>
            <div class="room-details">
                <div class="detail-item">
                    <span class="detail-label">–¢–∏–ø:</span>
                    <span class="detail-value">${this.getRoomTypeText(roomData.type)}</span>
                </div>
                ${roomData.capacity ? `
                <div class="detail-item">
                    <span class="detail-label">–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</span>
                    <span class="detail-value">${roomData.capacity}</span>
                </div>
                ` : ''}
                <div class="detail-item full-width">
                    <span class="detail-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                    <span class="detail-value">${roomData.description}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–≠—Ç–∞–∂:</span>
                    <span class="detail-value">${this.currentFloor}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">ID:</span>
                    <span class="detail-value code">${elementId}</span>
                </div>
            </div>
        `;
    }

    // –°–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è
    resetSelection() {
        if (this.selectedElement) {
            this.selectedElement.classList.remove('selected');
        }
        document.querySelectorAll('.interactive-room').forEach(room => {
            room.classList.remove('selected', 'hovered');
        });
        
        document.getElementById('room-info').classList.remove('visible');
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    bindGlobalEvents() {
        // –ö–ª–∏–∫ –≤–Ω–µ –∫–æ–º–Ω–∞—Ç—ã - —Å–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.interactive-room') && !e.target.closest('#room-info')) {
                this.resetSelection();
            }
        });

        // –ö–ª–∞–≤–∏—à–∞ Escape - —Å–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.resetSelection();
            }
        });

        // –ü–æ–∏—Å–∫ –ø–æ–º–µ—â–µ–Ω–∏–π
        const searchInput = document.getElementById('room-search');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.handleSearch(e.target.value);
            });
        }
    }

    // –ü–æ–∏—Å–∫ –ø–æ–º–µ—â–µ–Ω–∏–π
    handleSearch(query) {
        if (!query.trim()) {
            this.resetSearch();
            return;
        }

        const currentFloorData = this.floorsData[this.currentFloor];
        const results = [];

        // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        Object.entries(currentFloorData.rooms).forEach(([id, roomData]) => {
            const searchText = `${roomData.number} ${roomData.name} ${roomData.type}`.toLowerCase();
            if (searchText.includes(query.toLowerCase())) {
                results.push({ id, roomData });
            }
        });

        this.highlightSearchResults(results);
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    highlightSearchResults(results) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.resetSearch();
        
        results.forEach(result => {
            const element = document.getElementById(result.id);
            if (element) {
                element.classList.add('search-result');
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (results.length > 0) {
            const firstResult = results[0];
            const element = document.getElementById(firstResult.id);
            if (element) {
                this.showRoomInfo(firstResult.roomData, firstResult.id, element);
            }
        }
    }

    // –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    resetSearch() {
        document.querySelectorAll('.search-result').forEach(el => {
            el.classList.remove('search-result');
        });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getRoomTypeText(type) {
        const types = {
            classroom: '–£—á–µ–±–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
            lab: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            auditorium: '–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª',
            gym: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª',
            stairs: '–õ–µ—Å—Ç–Ω–∏—Ü–∞',
            entrance: '–í—Ö–æ–¥',
            office: '–û—Ñ–∏—Å'
        };
        return types[type] || type;
    }

    showLoading() {
        const container = document.getElementById('svg-container');
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</div>';
    }

    hideLoading() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ SVG
    }

    showError(message) {
        const container = document.getElementById('svg-container');
        container.innerHTML = `<div class="error">${message}</div>`;
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
class NavigationUtils {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    static calculateRoute(fromRoom, toRoom) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        console.log(`–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ ${fromRoom} –≤ ${toRoom}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É SVG
    if (!document.createElementNS || !document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect) {
        document.body.innerHTML = '<div class="error">–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SVG. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä.</div>';
        return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä
    window.collegeNavigator = new CollegeNavigator();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugNavigator = {
    getCurrentFloor: () => window.collegeNavigator?.currentFloor,
    getSelectedRoom: () => window.collegeNavigator?.selectedElement?.id,
    showAllRooms: () => console.log(window.collegeNavigator?.floorsData)
};